// Code generated by go-enum
// DO NOT EDIT!

package server

import (
	"fmt"
)

const (
	// HealthStarting is a Health of type Starting
	HealthStarting Health = iota
	// HealthHealthy is a Health of type Healthy
	HealthHealthy
	// HealthUnhealthy is a Health of type Unhealthy
	HealthUnhealthy
	// HealthStopping is a Health of type Stopping
	HealthStopping
)

const _HealthName = "StartingHealthyUnhealthyStopping"

var _HealthMap = map[Health]string{
	0: _HealthName[0:8],
	1: _HealthName[8:15],
	2: _HealthName[15:24],
	3: _HealthName[24:32],
}

// String implements the Stringer interface.
func (x Health) String() string {
	if str, ok := _HealthMap[x]; ok {
		return str
	}
	return fmt.Sprintf("Health(%d)", x)
}

var _HealthValue = map[string]Health{
	_HealthName[0:8]:   0,
	_HealthName[8:15]:  1,
	_HealthName[15:24]: 2,
	_HealthName[24:32]: 3,
}

// ParseHealth attempts to convert a string to a Health
func ParseHealth(name string) (Health, error) {
	if x, ok := _HealthValue[name]; ok {
		return x, nil
	}
	return Health(0), fmt.Errorf("%s is not a valid Health", name)
}

// MarshalText implements the text marshaller method
func (x Health) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method
func (x *Health) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseHealth(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
